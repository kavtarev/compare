// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: main.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SenderService_SendData_FullMethodName = "/grpc.SenderService/SendData"
)

// SenderServiceClient is the client API for SenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SenderServiceClient interface {
	SendData(ctx context.Context, in *LargeMixed, opts ...grpc.CallOption) (*DataResponse, error)
}

type senderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSenderServiceClient(cc grpc.ClientConnInterface) SenderServiceClient {
	return &senderServiceClient{cc}
}

func (c *senderServiceClient) SendData(ctx context.Context, in *LargeMixed, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, SenderService_SendData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SenderServiceServer is the server API for SenderService service.
// All implementations must embed UnimplementedSenderServiceServer
// for forward compatibility.
type SenderServiceServer interface {
	SendData(context.Context, *LargeMixed) (*DataResponse, error)
	mustEmbedUnimplementedSenderServiceServer()
}

// UnimplementedSenderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSenderServiceServer struct{}

func (UnimplementedSenderServiceServer) SendData(context.Context, *LargeMixed) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedSenderServiceServer) mustEmbedUnimplementedSenderServiceServer() {}
func (UnimplementedSenderServiceServer) testEmbeddedByValue()                       {}

// UnsafeSenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SenderServiceServer will
// result in compilation errors.
type UnsafeSenderServiceServer interface {
	mustEmbedUnimplementedSenderServiceServer()
}

func RegisterSenderServiceServer(s grpc.ServiceRegistrar, srv SenderServiceServer) {
	// If the following call pancis, it indicates UnimplementedSenderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SenderService_ServiceDesc, srv)
}

func _SenderService_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LargeMixed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderServiceServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SenderService_SendData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderServiceServer).SendData(ctx, req.(*LargeMixed))
	}
	return interceptor(ctx, in, info, handler)
}

// SenderService_ServiceDesc is the grpc.ServiceDesc for SenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.SenderService",
	HandlerType: (*SenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendData",
			Handler:    _SenderService_SendData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

const (
	ReceiverService_ReceiveData_FullMethodName = "/grpc.ReceiverService/ReceiveData"
)

// ReceiverServiceClient is the client API for ReceiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiverServiceClient interface {
	ReceiveData(ctx context.Context, in *LargeMixed, opts ...grpc.CallOption) (*DataResponse, error)
}

type receiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverServiceClient(cc grpc.ClientConnInterface) ReceiverServiceClient {
	return &receiverServiceClient{cc}
}

func (c *receiverServiceClient) ReceiveData(ctx context.Context, in *LargeMixed, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, ReceiverService_ReceiveData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServiceServer is the server API for ReceiverService service.
// All implementations must embed UnimplementedReceiverServiceServer
// for forward compatibility.
type ReceiverServiceServer interface {
	ReceiveData(context.Context, *LargeMixed) (*DataResponse, error)
	mustEmbedUnimplementedReceiverServiceServer()
}

// UnimplementedReceiverServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiverServiceServer struct{}

func (UnimplementedReceiverServiceServer) ReceiveData(context.Context, *LargeMixed) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveData not implemented")
}
func (UnimplementedReceiverServiceServer) mustEmbedUnimplementedReceiverServiceServer() {}
func (UnimplementedReceiverServiceServer) testEmbeddedByValue()                         {}

// UnsafeReceiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServiceServer will
// result in compilation errors.
type UnsafeReceiverServiceServer interface {
	mustEmbedUnimplementedReceiverServiceServer()
}

func RegisterReceiverServiceServer(s grpc.ServiceRegistrar, srv ReceiverServiceServer) {
	// If the following call pancis, it indicates UnimplementedReceiverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReceiverService_ServiceDesc, srv)
}

func _ReceiverService_ReceiveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LargeMixed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).ReceiveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_ReceiveData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).ReceiveData(ctx, req.(*LargeMixed))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiverService_ServiceDesc is the grpc.ServiceDesc for ReceiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ReceiverService",
	HandlerType: (*ReceiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveData",
			Handler:    _ReceiverService_ReceiveData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
